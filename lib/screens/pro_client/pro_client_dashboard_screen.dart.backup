import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../services/auth_service.dart';
import '../../services/pro_client_service.dart';

// Palette de couleurs
const Color primaryYellow = Color(0xFFFFCC00); // Jaune Caterpillar
const Color secondaryBlue = Color(0xFF1E3A5F); // Bleu foncé profond
const Color tertiaryGrey = Color(0xFFE5E5E5); // Gris clair background

class ProClientDashboardScreen extends StatefulWidget {
  final String token;
  final Map<String, dynamic> profile;

  const ProClientDashboardScreen({
    Key? key,
    required this.token,
    required this.profile,
  }) : super(key: key);

  @override
  State<ProClientDashboardScreen> createState() => _ProClientDashboardScreenState();
}

class _ProClientDashboardScreenState extends State<ProClientDashboardScreen> {
  final ProClientService _proClientService = ProClientService(
    baseUrl: 'http://10.0.2.2:8000',
    authService: AuthService(baseUrl: 'http://10.0.2.2:8000'),
  );

  int _currentIndex = 0; // Index de l'onglet actuel

  final List<Widget> _screens = [];
  final List<String> _titles = [
    'Accueil',
    'Mode Client',
    'Mode Pro',
    'Profil',
  ];

  Map<String, dynamic>? _dashboardData;
  Map<String, dynamic>? _profileData;

  @override
  void initState() {
    super.initState();
    _initializeScreens();
    _loadDashboardData();
    _loadProfileData();
  }

  Future<void> _loadProfileData() async {
    try {
      print('=== CHARGEMENT PROFIL ===');
      final response = await _proClientService.getProClientProfile(
        accessToken: widget.token,
      );

      print('Réponse profil reçue: ${response.statusCode}');
      if (response.statusCode == 200) {
        final profileData = await _proClientService.parseProClientProfileResponse(response);
        print('Données du profil parsées: $profileData');

        if (profileData != null) {
          print('Profil data contient user: ${profileData.containsKey('user')}');
          print('Profil data contient professional: ${profileData.containsKey('professional')}');
          setState(() {
            _profileData = profileData;
          });
          print('Profile data mis à jour dans le state');
        } else {
          print('Aucune donnée de profil valide reçue');
        }
      } else {
        print('Erreur serveur profil: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      print('Erreur lors du chargement du profil: $e');
    }
  }

  void _initializeScreens() {
    _screens.addAll([
      _buildHomeTab(), // Onglet Accueil (dashboard)
      _buildClientModeTab(), // Onglet Mode Client
      _buildProfessionalModeTab(), // Onglet Mode Professionnel
      _buildProfileTab(), // Onglet Profil
    ]);
  }

  Future<void> _loadDashboardData() async {
    try {
      print('=== CHARGEMENT DASHBOARD ===');
      final response = await _proClientService.getProClientDashboard(
        accessToken: widget.token,
      );

      print('Réponse reçue: ${response.statusCode}');
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        print('Données reçues du dashboard: $data');

        if (data['success'] == true && data['data'] != null) {
          final dashboardData = data['data'];
          print('Données du dashboard parsées: $dashboardData');
          print('Stats disponibles: ${dashboardData['stats']}');
          setState(() {
            _dashboardData = dashboardData;
          });
          print('Dashboard data mis à jour dans le state');
        } else {
          print('Données du dashboard invalides ou manquantes: success=${data['success']}, data=${data['data']}');
        }
      } else {
        print('Erreur serveur: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      print('Erreur lors du chargement du dashboard: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    print('=== BUILD DASHBOARD ===');
    print('Dashboard data: $_dashboardData');
    print('Profile data: $_profileData');
    print('Current index: $_currentIndex');

    return Scaffold(
      appBar: AppBar(
        title: Text(
          _titles[_currentIndex],
          style: const TextStyle(
            color: secondaryBlue,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: primaryYellow,
        elevation: 0,
        actions: [
          IconButton(
            icon: const Icon(Icons.logout, color: secondaryBlue),
            onPressed: _logout,
          ),
        ],
      ),
      body: Container(
        decoration: const BoxDecoration(
          color: tertiaryGrey,
        ),
        child: _screens[_currentIndex],
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
        backgroundColor: Colors.white,
        selectedItemColor: primaryYellow,
        unselectedItemColor: secondaryBlue.withOpacity(0.6),
        selectedLabelStyle: const TextStyle(
          fontWeight: FontWeight.bold,
          color: primaryYellow,
        ),
        unselectedLabelStyle: TextStyle(
          color: secondaryBlue.withOpacity(0.6),
        ),
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Accueil',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person_outline),
            label: 'Client',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.work_outline),
            label: 'Pro',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.account_circle),
            label: 'Profil',
          ),
        ],
      ),
    );
  }

  // Onglet Accueil - Dashboard général
  Widget _buildHomeTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildWelcomeCard(),
          const SizedBox(height: 20),
          _buildQuickActions(),
          const SizedBox(height: 20),
          _buildRecentActivity(),
          const SizedBox(height: 20),
          _buildProfileStats(),
        ],
      ),
    );
  }

  Widget _buildWelcomeCard() {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      child: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [primaryYellow, primaryYellow.withOpacity(0.8)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(16),
        ),
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Bonjour !',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: secondaryBlue,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Vous êtes connecté en tant que Pro-Client',
              style: TextStyle(
                fontSize: 16,
                color: secondaryBlue.withOpacity(0.8),
              ),
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                _buildModeToggle('Mode Client', Icons.person_outline),
                _buildModeToggle('Mode Pro', Icons.work_outline),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildModeToggle(String title, IconData icon) {
    return ElevatedButton.icon(
      onPressed: () {
        if (title == 'Mode Client') {
          setState(() => _currentIndex = 1);
        } else {
          setState(() => _currentIndex = 2);
        }
      },
      icon: Icon(icon, size: 18),
      label: Text(title),
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.white,
        foregroundColor: secondaryBlue,
        elevation: 2,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
  }

  Widget _buildQuickActions() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Actions rapides',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: secondaryBlue,
          ),
        ),
        const SizedBox(height: 12),
        Row(
          children: [
            Expanded(
              child: _buildQuickActionCard(
                'Créer demande',
                Icons.add_business,
                () => Navigator.pushNamed(context, '/pro-client/create-quotation'),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildQuickActionCard(
                'Voir devis',
                Icons.inbox,
                () => Navigator.pushNamed(context, '/pro-client/quotations'),
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildQuickActionCard(String title, IconData icon, VoidCallback onTap) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              Icon(icon, size: 32, color: primaryYellow),
              const SizedBox(height: 8),
              Text(
                title,
                style: const TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                  color: secondaryBlue,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildRecentActivity() {
    if (_dashboardData == null) {
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Activité récente',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: secondaryBlue,
            ),
          ),
          const SizedBox(height: 12),
          Card(
            elevation: 2,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            child: const Padding(
              padding: EdgeInsets.all(16),
              child: Column(
                children: [
                  ListTile(
                    leading: CircleAvatar(
                      backgroundColor: primaryYellow,
                      child: Icon(Icons.work, color: secondaryBlue),
                    ),
                    title: Text('Chargement...'),
                    subtitle: Text('Récupération de vos données'),
                  ),
                ],
              ),
            ),
          ),
        ],
      );
    }

    final recentJobsAsClient = _dashboardData!['recent_jobs_as_client'] as List<dynamic>? ?? [];
    final recentJobsAsProfessional = _dashboardData!['recent_jobs_as_professional'] as List<dynamic>? ?? [];
    final pendingQuotations = _dashboardData!['pending_quotations'] as List<dynamic>? ?? [];
    final activeJobs = _dashboardData!['active_jobs'] as List<dynamic>? ?? [];

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Activité récente',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: secondaryBlue,
          ),
        ),
        const SizedBox(height: 12),
        if (recentJobsAsClient.isNotEmpty || recentJobsAsProfessional.isNotEmpty || pendingQuotations.isNotEmpty || activeJobs.isNotEmpty)
          ...[
            if (recentJobsAsClient.isNotEmpty)
              _buildActivitySection('Jobs en tant que Client', recentJobsAsClient),
            if (recentJobsAsProfessional.isNotEmpty)
              _buildActivitySection('Jobs en tant que Professionnel', recentJobsAsProfessional),
            if (activeJobs.isNotEmpty)
              _buildActivitySection('Jobs Actifs', activeJobs),
            if (pendingQuotations.isNotEmpty)
              _buildActivitySection('Devis en Attente', pendingQuotations),
          ]
        else
          Card(
            elevation: 2,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  ListTile(
                    leading: CircleAvatar(
                      backgroundColor: primaryYellow,
                      child: Icon(Icons.work, color: secondaryBlue),
                    ),
                    title: Text('Aucune activité récente'),
                    subtitle: Text('Vos projets et devis apparaîtront ici'),
                  ),
                ],
              ),
            ),
          ),
      ],
    );
  }

  Widget _buildActivitySection(String title, List<dynamic> items) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            color: secondaryBlue,
          ),
        ),
        const SizedBox(height: 8),
        ...items.take(3).map((item) => _buildActivityItem(item)),
        const SizedBox(height: 12),
      ],
    );
  }

  Widget _buildActivityItem(dynamic item) {
    return Card(
      elevation: 1,
      margin: const EdgeInsets.only(bottom: 8),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(8),
      ),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: primaryYellow.withOpacity(0.1),
          child: Icon(Icons.work, color: primaryYellow, size: 20),
        ),
        title: Text(
          item['title'] ?? 'Titre non disponible',
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            color: secondaryBlue,
          ),
        ),
        subtitle: Text(
          _getActivitySubtitle(item),
          style: TextStyle(color: secondaryBlue.withOpacity(0.7)),
        ),
        trailing: _getActivityStatusBadge(item['status']),
      ),
    );
  }

  String _getActivitySubtitle(dynamic item) {
    if (item.containsKey('professional') && item['professional'] != null) {
      final professional = item['professional'];
      if (professional.containsKey('user') && professional['user'] != null) {
        final user = professional['user'];
        return 'Professionnel: ${user['first_name']} ${user['last_name']}';
      }
    }
    if (item.containsKey('client') && item['client'] != null) {
      final client = item['client'];
      return 'Client: ${client['first_name']} ${client['last_name']}';
    }
    if (item.containsKey('user') && item['user'] != null) {
      final user = item['user'];
      return 'Utilisateur: ${user['first_name']} ${user['last_name']}';
    }
    return 'Détails non disponibles';
  }

  Widget _getActivityStatusBadge(String? status) {
    Color color;
    String text;

    switch (status) {
      case 'pending':
        color = Colors.orange;
        text = 'En attente';
        break;
      case 'in_progress':
        color = Colors.blue;
        text = 'En cours';
        break;
      case 'completed':
        color = Colors.green;
        text = 'Terminé';
        break;
      default:
        color = Colors.grey;
        text = 'Inconnu';
    }

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color),
      ),
      child: Text(
        text,
        style: TextStyle(
          color: color,
          fontSize: 12,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  // Onglet Mode Client
  Widget _buildClientModeTab() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Mode Client',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: secondaryBlue,
            ),
          ),
          const SizedBox(height: 16),
          const Text(
            'En tant que client, vous pouvez :',
            style: TextStyle(fontSize: 16, color: Colors.grey),
          ),
          const SizedBox(height: 16),
          _buildActionCard(
            title: 'Créer une demande de devis',
            subtitle: 'Trouvez des professionnels pour vos projets',
            icon: Icons.add_business,
            onTap: () => Navigator.pushNamed(context, '/pro-client/create-quotation'),
          ),
          const SizedBox(height: 12),
          _buildActionCard(
            title: 'Mes devis reçus',
            subtitle: 'Consulter les propositions des professionnels',
            icon: Icons.inbox,
            onTap: () => Navigator.pushNamed(context, '/pro-client/quotations'),
          ),
          const SizedBox(height: 12),
          _buildActionCard(
            title: 'Mes jobs actifs',
            subtitle: 'Suivre l\'avancement de vos projets',
            icon: Icons.work,
            onTap: () => Navigator.pushNamed(context, '/pro-client/client-jobs'),
          ),
        ],
      ),
    );
  }

  // Onglet Mode Professionnel
  Widget _buildProfessionalModeTab() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Mode Professionnel',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: secondaryBlue,
            ),
          ),
          const SizedBox(height: 16),
          const Text(
            'En tant que professionnel, vous pouvez :',
            style: TextStyle(fontSize: 16, color: Colors.grey),
          ),
          const SizedBox(height: 16),
          _buildActionCard(
            title: 'Répondre aux devis',
            subtitle: 'Proposer vos services aux clients',
            icon: Icons.reply,
            onTap: () => Navigator.pushNamed(context, '/pro-client/respond-quotations'),
          ),
          const SizedBox(height: 12),
          _buildActionCard(
            title: 'Mes jobs assignés',
            subtitle: 'Gérer vos projets en cours',
            icon: Icons.assignment_turned_in,
            onTap: () => Navigator.pushNamed(context, '/pro-client/professional-jobs'),
          ),
          const SizedBox(height: 12),
          _buildActionCard(
            title: 'Mon profil professionnel',
            subtitle: 'Gérer vos informations professionnelles',
            icon: Icons.person,
            onTap: () => Navigator.pushNamed(context, '/pro-client/profile'),
          ),
        ],
      ),
    );
  }

  // Onglet Profil
  Widget _buildProfileTab() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Mon Profil',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: secondaryBlue,
            ),
          ),
          const SizedBox(height: 16),
          Card(
            elevation: 2,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  const CircleAvatar(
                    radius: 40,
                    backgroundColor: primaryYellow,
                    child: Icon(Icons.person, size: 40, color: secondaryBlue),
                  ),
                  const SizedBox(height: 16),
                  Text(
                    _profileData?['user']?['first_name'] ?? 'Utilisateur',
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: secondaryBlue,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _profileData?['professional']?['company_name'] ?? 'Entreprise',
                    style: TextStyle(
                      fontSize: 16,
                      color: secondaryBlue.withOpacity(0.7),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _getProfileStatusColor(),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Text(
                      _getProfileStatusText(),
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton.icon(
                    onPressed: () => Navigator.pushNamed(context, '/pro-client/complete-profile'),
                    icon: const Icon(Icons.edit),
                    label: const Text('Compléter le profil'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: primaryYellow,
                      foregroundColor: secondaryBlue,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 16),
          _buildProfileStats(),
        ],
      ),
    );
  }

  Widget _buildProfileStats() {
    print('=== BUILD PROFILE STATS ===');
    print('Dashboard data null: ${_dashboardData == null}');
    print('Dashboard stats null: ${_dashboardData?['stats'] == null}');

    if (_dashboardData == null || _dashboardData!['stats'] == null) {
      print('Affichage des statistiques par défaut (données non chargées)');
      return Card(
        elevation: 2,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Statistiques',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: secondaryBlue,
                ),
              ),
              const SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  _buildStatItem('Jobs Client', '0', Icons.person_outline),
                  _buildStatItem('Jobs Pro', '0', Icons.work_outline),
                  _buildStatItem('Devis', '0', Icons.description),
                ],
              ),
            ],
          ),
        ),
      );
    }

    final stats = _dashboardData!['stats'] as Map<String, dynamic>;
    print('Stats récupérées: $stats');

    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Statistiques',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: secondaryBlue,
              ),
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildStatItem('Jobs Client', stats['jobs_as_client']?.toString() ?? '0', Icons.person_outline),
                _buildStatItem('Jobs Pro', stats['jobs_as_professional']?.toString() ?? '0', Icons.work_outline),
                _buildStatItem('Devis', stats['pending_quotations']?.toString() ?? '0', Icons.description),
              ],
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildStatItem('Actifs', stats['active_jobs']?.toString() ?? '0', Icons.play_arrow),
                _buildStatItem('Note', '5.0', Icons.star),
                _buildStatItem('Profil', (_profileData?['professional']?['status'] == 'approved') ? 'Complet' : 'Incomplet', Icons.check_circle),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon) {
    return Column(
      children: [
        Icon(icon, size: 24, color: primaryYellow),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: secondaryBlue,
          ),
        ),
        Text(
          label,
          style: TextStyle(
            fontSize: 12,
            color: secondaryBlue.withOpacity(0.7),
          ),
        ),
      ],
    );
  }

  Color _getProfileStatusColor() {
    if (_profileData?['professional']?['status'] == 'approved') {
      return Colors.green;
    } else if (_profileData?['professional']?['status'] == 'pending') {
      return Colors.orange;
    } else {
      return Colors.grey;
    }
  }

  String _getProfileStatusText() {
    if (_profileData?['professional']?['status'] == 'approved') {
      return 'Approuvé';
    } else if (_profileData?['professional']?['status'] == 'pending') {
      return 'En attente';
    } else {
      return 'Incomplet';
    }
  }

  Widget _buildActionCard({
    required String title,
    required String subtitle,
    required IconData icon,
    required VoidCallback onTap,
  }) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: primaryYellow.withOpacity(0.1),
          child: Icon(icon, color: primaryYellow),
        ),
        title: Text(
          title,
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            color: secondaryBlue,
          ),
        ),
        subtitle: Text(subtitle),
        trailing: const Icon(Icons.arrow_forward_ios, color: Colors.grey),
        onTap: onTap,
      ),
    );
  }

  Future<void> _logout() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('access_token');
    await prefs.remove('user');

    if (mounted) {
      Navigator.pushNamedAndRemoveUntil(context, '/', (route) => false);
    }
  }
}
